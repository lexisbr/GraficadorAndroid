
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import lexer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\015\000\002\003\015\000\002\003\017" +
    "\000\002\003\015\000\002\003\021\000\002\003\003\000" +
    "\002\004\004\000\002\004\006\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\002\000\002\006\003\000\002\007\003\000\002\007\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\003\006\015\004\001\002\000\016\003" +
    "\012\010\014\011\016\012\011\013\015\014\013\001\002" +
    "\000\004\002\007\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\004" +
    "\025\112\001\002\000\004\002\ufff9\001\002\000\004\025" +
    "\074\001\002\000\004\025\062\001\002\000\004\025\050" +
    "\001\002\000\004\025\017\001\002\000\006\021\021\025" +
    "\020\001\002\000\006\021\021\025\020\001\002\000\016" +
    "\004\036\005\034\006\035\007\037\024\ufff2\026\ufff2\001" +
    "\002\000\004\024\023\001\002\000\006\021\021\025\020" +
    "\001\002\000\004\024\025\001\002\000\006\021\021\025" +
    "\020\001\002\000\004\024\027\001\002\000\004\022\030" +
    "\001\002\000\004\026\031\001\002\000\004\004\032\001" +
    "\002\000\004\002\ufff1\001\002\000\004\002\ufffd\001\002" +
    "\000\006\021\021\025\020\001\002\000\006\021\021\025" +
    "\020\001\002\000\006\021\021\025\020\001\002\000\006" +
    "\021\021\025\020\001\002\000\006\024\ufff8\026\ufff8\001" +
    "\002\000\006\024\ufff3\026\ufff3\001\002\000\006\024\ufff6" +
    "\026\ufff6\001\002\000\006\024\ufff4\026\ufff4\001\002\000" +
    "\006\024\ufff5\026\ufff5\001\002\000\004\026\046\001\002" +
    "\000\016\004\036\005\034\006\035\007\037\024\ufff2\026" +
    "\ufff2\001\002\000\006\024\ufff7\026\ufff7\001\002\000\006" +
    "\021\021\025\020\001\002\000\004\024\052\001\002\000" +
    "\006\021\021\025\020\001\002\000\004\024\054\001\002" +
    "\000\006\021\021\025\020\001\002\000\004\024\056\001" +
    "\002\000\004\022\057\001\002\000\004\026\060\001\002" +
    "\000\004\004\032\001\002\000\004\002\ufffb\001\002\000" +
    "\006\021\021\025\020\001\002\000\004\024\064\001\002" +
    "\000\006\021\021\025\020\001\002\000\004\024\066\001" +
    "\002\000\006\021\021\025\020\001\002\000\004\024\070" +
    "\001\002\000\004\022\071\001\002\000\004\026\072\001" +
    "\002\000\004\004\032\001\002\000\004\002\ufffe\001\002" +
    "\000\006\021\021\025\020\001\002\000\004\024\076\001" +
    "\002\000\006\021\021\025\020\001\002\000\004\024\100" +
    "\001\002\000\006\021\021\025\020\001\002\000\004\024" +
    "\102\001\002\000\006\021\021\025\020\001\002\000\004" +
    "\024\104\001\002\000\006\021\021\025\020\001\002\000" +
    "\004\024\106\001\002\000\004\022\107\001\002\000\004" +
    "\026\110\001\002\000\004\004\032\001\002\000\004\002" +
    "\ufffa\001\002\000\006\021\021\025\020\001\002\000\004" +
    "\024\114\001\002\000\006\021\021\025\020\001\002\000" +
    "\004\024\116\001\002\000\006\021\021\025\020\001\002" +
    "\000\004\024\120\001\002\000\006\021\021\025\020\001" +
    "\002\000\004\024\122\001\002\000\004\022\123\001\002" +
    "\000\004\026\124\001\002\000\004\004\032\001\002\000" +
    "\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\004\002\004\001\001\000\004\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\021\001\001\000\004\004\044\001" +
    "\001\000\004\005\037\001\001\000\002\001\001\000\004" +
    "\004\023\001\001\000\002\001\001\000\004\004\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\043\001\001\000\004\004\042\001\001" +
    "\000\004\004\041\001\001\000\004\004\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\046\001\001\000\002\001\001\000\004\004\050\001\001" +
    "\000\002\001\001\000\004\004\052\001\001\000\002\001" +
    "\001\000\004\004\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\060\001\001\000" +
    "\002\001\001\000\004\004\062\001\001\000\002\001\001" +
    "\000\004\004\064\001\001\000\002\001\001\000\004\004" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\072\001\001\000\002\001\001\000" +
    "\004\004\074\001\001\000\002\001\001\000\004\004\076" +
    "\001\001\000\002\001\001\000\004\004\100\001\001\000" +
    "\002\001\001\000\004\004\102\001\001\000\002\001\001" +
    "\000\004\004\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\110\001\001\000\002" +
    "\001\001\000\004\004\112\001\001\000\002\001\001\000" +
    "\004\004\114\001\001\000\002\001\001\000\004\004\116" +
    "\001\001\000\002\001\001\000\004\004\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\124\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
    public Parser(Lexer lex){
        super(lex);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // a ::= GRAFICAR b 
            {
              Object RESULT =null;
		 System.out.printf("Inicia"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // a ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.printf("Error en expresion al iniciar %s \n",(String) err); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // b ::= CIRCULO PARENTESIS_A c COMA c COMA c COMA COLOR PARENTESIS_C e 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // b ::= CUADRADO PARENTESIS_A c COMA c COMA c COMA COLOR PARENTESIS_C e 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // b ::= RECTANGULO PARENTESIS_A c COMA c COMA c COMA c COMA COLOR PARENTESIS_C e 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // b ::= LINEA PARENTESIS_A c COMA c COMA c COMA COLOR PARENTESIS_C e 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // b ::= POLIGONO PARENTESIS_A c COMA c COMA c COMA c COMA c COMA COLOR PARENTESIS_C e 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // b ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.printf("Error en expresion %s \n",(String) err); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // c ::= ENTERO d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // c ::= PARENTESIS_A c PARENTESIS_C d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // d ::= SUMA c 
            {
              Object RESULT =null;
		 System.out.printf("Se encontro un operador" ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // d ::= RESTA c 
            {
              Object RESULT =null;
		 System.out.printf("Se encontro un operador" ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // d ::= MULTIPLICACION c 
            {
              Object RESULT =null;
		 System.out.printf("Se encontro un operador" ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // d ::= DIVISION c 
            {
              Object RESULT =null;
		 System.out.printf("Se encontro un operador" ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // d ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // e ::= SUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // f ::= CURVA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // f ::= LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
