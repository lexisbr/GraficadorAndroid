package com.example.graficadorapp.parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import com.example.graficadorapp.lexer.*;
import com.example.graficadorapp.objetos.*;
import com.example.graficadorapp.reportes.ErrorToken;


//agregar biblioteca cup como dependencia en android studio
// https://developer.android.com/studio/projects/android-library?hl=es

parser code {:

    private ArrayList<ErrorToken> errorsList = new ArrayList<>();
    private Animacion animacion;
    private Graficador graficador = new Graficador();
    private boolean errores=false;

	public Parser(Lexer lex) {
		super(lex);
		this.errorsList = lex.getErrorsList();
	}
	@Override
    public void syntax_error(Symbol st) {
        Token error = (Token) st.value;
        report_error("Error Sintactico con el Token:"+ error.getLexeme()+" este no pertenece a la estructura  >linea: "+error.getLine()+" >columna: "+error.getColumn() + "\n",null);
        ErrorToken errorF = new ErrorToken(error.getLexeme(),error.getLine(),error.getColumn(),"","Sintactico");
        errorF.siguiente(expected_token_ids());
        errorsList.add(errorF);
    }

    public ArrayList<ErrorToken> getErrorsList(){
        return errorsList;
    }

    public Graficador getGraficador(){
        return graficador;
    }

    public boolean getErrores(){
        return errores;
    }

:};

/* Terminals (tokens returned by the scanner). */
terminal Token	GRAFICAR;
terminal Token	CUADRADO;
terminal Token	CIRCULO;
terminal Token	RECTANGULO;
terminal Token	LINEA;
terminal Token	POLIGONO;
terminal Token	PARENTESIS_C;
terminal Token	PARENTESIS_A;
terminal Token	COMA;
terminal Token  ENTERO;
terminal Token  SUMA;
terminal Token  RESTA;
terminal Token  MULTI;
terminal Token  DIVISION;
terminal Token  COLOR;
terminal Token  ANIMAR;
terminal Token  OBJETO;
terminal Token  ANTERIOR;
terminal Token  CURVA;


/* Non-Terminals (created scanner). */
non terminal  inicio, a, b;
non terminal Integer d,c;
non terminal Animacion e,g;
non terminal Token f;
precedence left SUMA, RESTA;
precedence left MULTI, DIVISION;

/* The grammar : */

start with inicio;
inicio ::= a
    | error:err a {:/* System.out.printf("Error sintacto %s",err); *//* ErrorToken error = new ErrorToken(err.getLexeme(),err.getLine(),err.getColumn(),"Se esperaba la palabra: \"graficar\" ","Sintactico");*/
      /*errorsList.add(errs);*/
      errores = true; :}
;

a ::= GRAFICAR b a
    |
;

b ::= CUADRADO PARENTESIS_A c:posx COMA c:posy COMA c:lon COMA COLOR:color PARENTESIS_C e:animacion {:
            /*System.out.printf("Graficar cuadrado %s \n",color.getLexeme());*/
            Cuadrado figura = new Cuadrado(lon,color.getLexeme(),posx,posy,animacion);
            graficador.addFigure(figura);
        :}
    | CIRCULO PARENTESIS_A c:posx COMA c:posy COMA c:radio COMA COLOR:color PARENTESIS_C  e:animacion {:
            Circulo figura = new Circulo(radio,color.getLexeme(),posx,posy,animacion);
            graficador.addFigure(figura);
        :}
    | RECTANGULO PARENTESIS_A c:posx COMA c:posy COMA c:alto COMA c:ancho COMA COLOR:color PARENTESIS_C e:animacion {:
            /*System.out.printf("Graficar rectangulo\n");*/
            Rectangulo figura = new Rectangulo(alto,ancho,color.getLexeme(),posx,posy,animacion);
            graficador.addFigure(figura);
        :}
    | LINEA PARENTESIS_A c:posx COMA c:posy COMA c:posx2 COMA c:posy2 COMA COLOR:color PARENTESIS_C  e:animacion {:
            /*System.out.printf("Graficar linea\n");*/
            Linea figura = new Linea(posx2,posy2,color.getLexeme(),posx,posy,animacion);
            graficador.addFigure(figura);
        :}
    | POLIGONO PARENTESIS_A c:posx COMA c:posy COMA c:alto COMA c:ancho COMA c:cantidad COMA COLOR:color PARENTESIS_C  e:animacion {:
            /*System.out.printf("Graficar poligono\n");*/
            Poligono figura = new Poligono(alto,ancho,cantidad,color.getLexeme(),posx,posy,animacion);
            graficador.addFigure(figura);
        :}
    | error:err b {:  /*ErrorToken error = new ErrorToken(err.getLexeme(),err.getLine(),err.getColumn(),"Se esperaba una forma a graficar","Sintactico"); 
            errorsList.add(error);*/
            errores = true; :}
;

c ::= d:resultado {: RESULT = resultado; /*System.out.printf("Resultado FINAL: %d \n",resultado);*/ :}
    | error:err {:/* ErrorToken error = new ErrorToken(err.getLexeme(),err.getLine(),err.getColumn(),"Se esperaba una operacion matematica valida","Sintactico"); 
            errorsList.add(error);*/
            errores = true; :}
;

d ::= d:e1 SUMA d:e2 {:   RESULT = new Integer(e1.intValue()+e2.intValue()); /* System.out.printf("Resultado suma: %d\n",RESULT);*/ :}
    | d:e1 RESTA d:e2 {: RESULT = new Integer(e1.intValue()-e2.intValue()); /* System.out.printf("Resultado resta: %d\n",RESULT);*/ :}
    | d:e1 MULTI d:e2 {:  RESULT = new Integer(e1.intValue()*e2.intValue()); /* System.out.printf("Resultado multiplicacion: %d\n",RESULT);*/ :}
    | d:e1 DIVISION d:e2 {:  RESULT = new Integer(e1.intValue()/e2.intValue()); /* System.out.printf("Resultado division: %d\n",RESULT);*/ :}
    | ENTERO:e1 {:  RESULT = new Integer(Integer.parseInt(e1.getLexeme())); /*System.out.printf("Numero: %d\n",RESULT );*/ :}
    | PARENTESIS_A d:e1 PARENTESIS_C {: RESULT = e1; /*System.out.printf("Resultado parentesis: %d\n",RESULT );*/ :}
    | error:err c {: /*ErrorToken error = new ErrorToken(err.getLexeme(),err.getLine(),err.getColumn(),"Se esperaba una operacion matematica valida","Sintactico"); 
            errorsList.add(error);*/
            errores = true; :} 
;

e ::= ANIMAR g:anim {: RESULT = anim; /*System.out.printf("Se encontro una animacion \n" );*/ :}
    |{: 
        animacion = null;
        RESULT  =  animacion;
        /*System.out.printf("No se hace animacion \n" ); */
    :}
;

g ::= OBJETO ANTERIOR PARENTESIS_A c:destinox COMA c:destinoy COMA f:tipo PARENTESIS_C {:
        RESULT = new Animacion(destinox,destinoy,tipo.getLexeme());
    :}
    | error:err {: /*ErrorToken error = new ErrorToken(err.getLexeme(),err.getLine(),err.getColumn(),"Se esperaba una animacion valida","Sintactico"); 
            errorsList.add(error);*/
            errores = true; :}
;

f  ::= CURVA:rest {: RESULT = rest; :}
    | LINEA:rest {: RESULT = rest; :}
;

