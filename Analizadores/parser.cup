package parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import lexer.*;

//agregar biblioteca cup como dependencia en android studio
// https://developer.android.com/studio/projects/android-library?hl=es

parser code {:

    private List<String> errorsList;
	public Parser(Lexer lex) {
		super(lex);
		this.errorsList = new ArrayList();
	}
	@Override
        public void syntax_error(Symbol st) {
        	Token token = (Token) st.value;
            report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);

            System.out.println("Error Sintactico con el Token: " + token.getLexeme() + " este no pertenece a la estructura - linea: " + token.getLine() + ", columna: " + token.getColumn());
                    errorsList.add(String.format("Error Sintactico con el Token: '%s' este no pertenece a la estructura- linea: %d  columna: %d. Corrige e intenta de nuevo.", token.getLexeme(), token.getLine(), token.getColumn()));
        }

	    //retorna list de errores sintacticos
        public List<String> getErrorsList(){
	        return errorsList
	        ;
	    }

:};

/* Terminals (tokens returned by the scanner). */
terminal Token	GRAFICAR;
terminal Token	CUADRADO;
terminal Token	PARENTESIS_C;
terminal Token	PARENTESIS_A;
terminal Token	COMA;
terminal Token  ENTERO;
terminal Token  COLOR;


/* Non-Terminals (created scanner). */
non terminal  inicio, aver;

/* The grammar : */

start with inicio;
inicio ::= aver
        | error	{:
            System.out.println("Error en expresion");
        :}
;

aver ::= GRAFICAR CUADRADO PARENTESIS_A ENTERO COMA ENTERO COMA ENTERO COMA COLOR PARENTESIS_C {:
            System.out.println("Graficar cuadrado");
        :}
;

