package parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import lexer.*;

parser code {:
    private List<String> errorsList;

    public Parser(Lexer lex){
        super(lex);
        this.errorsList = new ArrayList();
    }
    @Override
    public void syntax_error(Symbol st){
        Token token = (Token) st.value;
        report_error("Error Sintactico con el Token:"+ token.getLexeme() + " este no pertenece a la estructura - linea: " + token.getLine() + "- columna: "+ token.getColumn() + "\n", null);

        System.out.println("Error Sintactico con el Token: " + token.getLexeme() + " este no pertenece a la estructura - linea: " + token.getLine() + ", columna: " + token.getColumn());
        errorsList.add(String.format("Error Sintactico con el Token: '%s' este no pertenece a la estructura- linea: %d  columna: %d. Corrige e intenta de nuevo.", token.getLexeme(), token.getLine(), token.getColumn()));
    }
:}

terminal Token SUMA,RESTA,MULTIPLICACION,DIVISION,CIRCULO,CUADRADO,
RECTANGULO,LINEA,POLIGONO,GRAFICAR,ANIMAR,OBJETO,ANTERIOR,ENTERO,
COLOR,CURVA,COMA,PARENTESIS_A,PARENTESIS_C;

non terminal a,b,c,d,e,f;

start with a;
a ::= GRAFICAR b {: System.out.printf("Inicia"); :}
    | error:err {: System.out.printf("Error en expresion %s \n",(String) err); :}
;

b ::= CIRCULO PARENTESIS_A c COMA c COMA c COMA COLOR:color PARENTESIS_C e {: System.out.printf("Graficar un circulo color %s \n",color.getLexeme()); :}
    | CUADRADO PARENTESIS_A c COMA c COMA c COMA COLOR:color PARENTESIS_C e {: System.out.printf("Graficar un cuadrado color %s \n",color.getLexeme()); :}
    | RECTANGULO PARENTESIS_A c COMA c COMA c COMA c COMA COLOR:color PARENTESIS_C  e {: System.out.printf("Graficar un rectangulo color %s \n",color.getLexeme()); :}
    | LINEA PARENTESIS_A c COMA c COMA c COMA COLOR:color PARENTESIS_C  e {: System.out.printf("Graficar un linea color %s \n",color.getLexeme());; :}
    | POLIGONO PARENTESIS_A c COMA c COMA c COMA c COMA c COMA COLOR:color PARENTESIS_C  e {: System.out.printf("Graficar un poligono color %s \n",color.getLexeme()); :}
    | error:err {: System.out.printf("Error en expresion %s \n",(String) err); :}
;

c ::= ENTERO d
    | PARENTESIS_A c PARENTESIS_C d
;

d ::= SUMA c {: System.out.printf("Se encontro un operador" ); :}
    | RESTA c {: System.out.printf("Se encontro un operador" ); :}
    | MULTIPLICACION c {: System.out.printf("Se encontro un operador" ); :}
    | DIVISION c {: System.out.printf("Se encontro un operador" ); :}
    |
;

e ::= ANIMAR OBJETO ANTERIOR PARENTESIS_A c COMA c COMA f PARENTESIS_C a
    | a
    |
;

f  ::= CURVA
    | LINEA
;



