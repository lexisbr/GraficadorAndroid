
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.graficadorapp.parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import com.example.graficadorapp.lexer.*;
import com.example.graficadorapp.objetos.*;
import com.example.graficadorapp.reportes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    @Deprecated
    public Parser() {super();}

    /** Constructor which sets the default scanner. */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\032\000\002\002\004\000\002\002\003\000\002\002" +
                            "\004\000\002\003\005\000\002\003\002\000\002\004\015" +
                            "\000\002\004\015\000\002\004\017\000\002\004\017\000" +
                            "\002\004\021\000\002\004\004\000\002\006\003\000\002" +
                            "\006\003\000\002\005\005\000\002\005\005\000\002\005" +
                            "\005\000\002\005\005\000\002\005\003\000\002\005\005" +
                            "\000\002\005\004\000\002\007\004\000\002\007\002\000" +
                            "\002\010\013\000\002\010\003\000\002\011\003\000\002" +
                            "\011\003" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\150\000\010\002\ufffd\003\006\004\004\001\002\000" +
                            "\016\003\014\005\020\006\016\007\013\010\017\011\015" +
                            "\001\002\000\004\002\000\001\002\000\006\002\ufffd\004" +
                            "\004\001\002\000\004\002\010\001\002\000\004\002\001" +
                            "\001\002\000\004\002\uffff\001\002\000\006\002\ufffd\004" +
                            "\004\001\002\000\004\013\136\001\002\000\016\003\014" +
                            "\005\020\006\016\007\013\010\017\011\015\001\002\000" +
                            "\004\013\117\001\002\000\004\013\105\001\002\000\004" +
                            "\013\071\001\002\000\004\013\021\001\002\000\010\003" +
                            "\022\013\023\015\026\001\002\000\024\003\022\012\ufff5" +
                            "\013\023\014\ufff5\015\026\016\ufff5\017\ufff5\020\ufff5\021" +
                            "\ufff5\001\002\000\010\003\061\013\023\015\026\001\002" +
                            "\000\016\012\ufff6\014\ufff6\016\056\017\055\020\060\021" +
                            "\057\001\002\000\004\014\027\001\002\000\016\012\ufff0" +
                            "\014\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\001\002\000" +
                            "\010\003\022\013\023\015\026\001\002\000\004\014\031" +
                            "\001\002\000\010\003\022\013\023\015\026\001\002\000" +
                            "\004\014\033\001\002\000\004\022\034\001\002\000\004" +
                            "\012\035\001\002\000\010\002\uffec\004\uffec\023\036\001" +
                            "\002\000\006\003\040\024\042\001\002\000\006\002\ufffc" +
                            "\004\ufffc\001\002\000\006\002\uffea\004\uffea\001\002\000" +
                            "\006\002\uffed\004\uffed\001\002\000\004\025\043\001\002" +
                            "\000\004\013\044\001\002\000\010\003\022\013\023\015" +
                            "\026\001\002\000\004\014\046\001\002\000\010\003\022" +
                            "\013\023\015\026\001\002\000\004\014\050\001\002\000" +
                            "\006\010\053\026\051\001\002\000\004\012\uffe9\001\002" +
                            "\000\004\012\054\001\002\000\004\012\uffe8\001\002\000" +
                            "\006\002\uffeb\004\uffeb\001\002\000\010\003\061\013\023" +
                            "\015\026\001\002\000\010\003\061\013\023\015\026\001" +
                            "\002\000\010\003\061\013\023\015\026\001\002\000\010" +
                            "\003\061\013\023\015\026\001\002\000\010\003\022\013" +
                            "\023\015\026\001\002\000\016\012\ufff2\014\ufff2\016\ufff2" +
                            "\017\ufff2\020\ufff2\021\ufff2\001\002\000\016\012\uffee\014" +
                            "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\001\002\000\016" +
                            "\012\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\001" +
                            "\002\000\016\012\ufff4\014\ufff4\016\ufff4\017\ufff4\020\060" +
                            "\021\057\001\002\000\016\012\ufff3\014\ufff3\016\ufff3\017" +
                            "\ufff3\020\060\021\057\001\002\000\014\012\070\016\056" +
                            "\017\055\020\060\021\057\001\002\000\016\012\uffef\014" +
                            "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\001\002\000\010" +
                            "\003\022\013\023\015\026\001\002\000\004\014\073\001" +
                            "\002\000\010\003\022\013\023\015\026\001\002\000\004" +
                            "\014\075\001\002\000\010\003\022\013\023\015\026\001" +
                            "\002\000\004\014\077\001\002\000\010\003\022\013\023" +
                            "\015\026\001\002\000\004\014\101\001\002\000\004\022" +
                            "\102\001\002\000\004\012\103\001\002\000\010\002\uffec" +
                            "\004\uffec\023\036\001\002\000\006\002\ufff9\004\ufff9\001" +
                            "\002\000\010\003\022\013\023\015\026\001\002\000\004" +
                            "\014\107\001\002\000\010\003\022\013\023\015\026\001" +
                            "\002\000\004\014\111\001\002\000\010\003\022\013\023" +
                            "\015\026\001\002\000\004\014\113\001\002\000\004\022" +
                            "\114\001\002\000\004\012\115\001\002\000\010\002\uffec" +
                            "\004\uffec\023\036\001\002\000\006\002\ufffb\004\ufffb\001" +
                            "\002\000\010\003\022\013\023\015\026\001\002\000\004" +
                            "\014\121\001\002\000\010\003\022\013\023\015\026\001" +
                            "\002\000\004\014\123\001\002\000\010\003\022\013\023" +
                            "\015\026\001\002\000\004\014\125\001\002\000\010\003" +
                            "\022\013\023\015\026\001\002\000\004\014\127\001\002" +
                            "\000\010\003\022\013\023\015\026\001\002\000\004\014" +
                            "\131\001\002\000\004\022\132\001\002\000\004\012\133" +
                            "\001\002\000\010\002\uffec\004\uffec\023\036\001\002\000" +
                            "\006\002\ufff8\004\ufff8\001\002\000\006\002\ufff7\004\ufff7" +
                            "\001\002\000\010\003\022\013\023\015\026\001\002\000" +
                            "\004\014\140\001\002\000\010\003\022\013\023\015\026" +
                            "\001\002\000\004\014\142\001\002\000\010\003\022\013" +
                            "\023\015\026\001\002\000\004\014\144\001\002\000\010" +
                            "\003\022\013\023\015\026\001\002\000\004\014\146\001" +
                            "\002\000\004\022\147\001\002\000\004\012\150\001\002" +
                            "\000\010\002\uffec\004\uffec\023\036\001\002\000\006\002" +
                            "\ufffa\004\ufffa\001\002\000\004\002\ufffe\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\150\000\006\002\006\003\004\001\001\000\004\004" +
                            "\011\001\001\000\002\001\001\000\004\003\010\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\003\151\001\001\000\002\001\001\000\004\004\134" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\005\023\006\024\001\001" +
                            "\000\006\005\023\006\062\001\001\000\004\005\066\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\005\023\006\027\001\001\000\002\001\001\000" +
                            "\006\005\023\006\031\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\007\036\001\001\000" +
                            "\004\010\040\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\005\023\006\044\001\001\000\002\001\001\000\006" +
                            "\005\023\006\046\001\001\000\002\001\001\000\004\011" +
                            "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\005\065\001\001\000" +
                            "\004\005\064\001\001\000\004\005\063\001\001\000\004" +
                            "\005\061\001\001\000\006\005\023\006\062\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\006\005\023\006\071\001\001\000\002\001\001" +
                            "\000\006\005\023\006\073\001\001\000\002\001\001\000" +
                            "\006\005\023\006\075\001\001\000\002\001\001\000\006" +
                            "\005\023\006\077\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\007\103\001\001\000\002" +
                            "\001\001\000\006\005\023\006\105\001\001\000\002\001" +
                            "\001\000\006\005\023\006\107\001\001\000\002\001\001" +
                            "\000\006\005\023\006\111\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\007\115\001\001" +
                            "\000\002\001\001\000\006\005\023\006\117\001\001\000" +
                            "\002\001\001\000\006\005\023\006\121\001\001\000\002" +
                            "\001\001\000\006\005\023\006\123\001\001\000\002\001" +
                            "\001\000\006\005\023\006\125\001\001\000\002\001\001" +
                            "\000\006\005\023\006\127\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\007\133\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\005\023\006" +
                            "\136\001\001\000\002\001\001\000\006\005\023\006\140" +
                            "\001\001\000\002\001\001\000\006\005\023\006\142\001" +
                            "\001\000\002\001\001\000\006\005\023\006\144\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\007\150\001\001\000\002\001\001\000\002\001\001" +
                            "" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 0;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}




    private ArrayList<OperadorReport> operadoresList = new ArrayList<>();
    private ArrayList<ErrorToken> errorsList = new ArrayList<>();
    private ArrayList<FiguraReport> figuras;
    private ArrayList<AnimacionReport> animaciones;
    private Animacion animacion;
    private Graficador graficador = new Graficador();
    private boolean errores=false;

    public Parser(Lexer lex) {
        super(lex);
        this.errorsList = lex.getErrorsList();
        this.figuras = lex.getFigurasList();
        this.animaciones = lex.getAnimacionesList();
    }
    @Override
    public void syntax_error(Symbol st) {
        Token error = (Token) st.value;
        report_error("Error Sintactico con el Token:"+ error.getLexeme()+" este no pertenece a la estructura  >linea: "+error.getLine()+" >columna: "+error.getColumn() + "\n",null);
        ErrorToken errorF = new ErrorToken(error.getLexeme(),error.getLine(),error.getColumn(),"","Sintactico");
        errorF.siguiente(expected_token_ids());
        errorsList.add(errorF);
    }

    public ArrayList<ErrorToken> getErrorsList(){
        return errorsList;
    }

    public ArrayList<OperadorReport> getOperadoresList(){
        return operadoresList;
    }

    public ArrayList<FiguraReport> getFigurasList(){
        return figuras;
    }

    public ArrayList<AnimacionReport> getAnimacionesList(){
        return animaciones;
    }

    public Graficador getGraficador(){
        return graficador;
    }

    public boolean getErrores(){
        return errores;
    }



    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /** Constructor */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int                        CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack            CUP$Parser$stack,
                int                        CUP$Parser$top)
                throws java.lang.Exception
        {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num)
            {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= inicio EOF
                {
                    Object RESULT =null;
                    int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // inicio ::= a
                {
                    Object RESULT =null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // inicio ::= error a
                {
                    Object RESULT =null;
                    int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                    errores = true;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // a ::= GRAFICAR b a
                {
                    Object RESULT =null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // a ::=
                {
                    Object RESULT =null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // b ::= CUADRADO PARENTESIS_A c COMA c COMA c COMA COLOR PARENTESIS_C e
                {
                    Object RESULT =null;
                    int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
                    int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
                    Integer posx = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
                    int posyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
                    int posyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
                    Integer posy = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
                    int lonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
                    int lonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
                    Integer lon = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Token color = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int animacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int animacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Animacion animacion = (Animacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    /*System.out.printf("Graficar cuadrado %s \n",color.getLexeme());*/
                    Cuadrado figura = new Cuadrado(lon,color.getLexeme(),posx,posy,animacion);
                    graficador.addFigure(figura);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // b ::= CIRCULO PARENTESIS_A c COMA c COMA c COMA COLOR PARENTESIS_C e
                {
                    Object RESULT =null;
                    int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
                    int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
                    Integer posx = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
                    int posyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
                    int posyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
                    Integer posy = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
                    int radioleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
                    int radioright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
                    Integer radio = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Token color = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int animacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int animacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Animacion animacion = (Animacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    Circulo figura = new Circulo(radio,color.getLexeme(),posx,posy,animacion);
                    graficador.addFigure(figura);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // b ::= RECTANGULO PARENTESIS_A c COMA c COMA c COMA c COMA COLOR PARENTESIS_C e
                {
                    Object RESULT =null;
                    int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
                    int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
                    Integer posx = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
                    int posyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
                    int posyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
                    Integer posy = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
                    int altoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
                    int altoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
                    Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
                    int ancholeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
                    int anchoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
                    Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Token color = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int animacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int animacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Animacion animacion = (Animacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    /*System.out.printf("Graficar rectangulo\n");*/
                    Rectangulo figura = new Rectangulo(alto,ancho,color.getLexeme(),posx,posy,animacion);
                    graficador.addFigure(figura);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // b ::= LINEA PARENTESIS_A c COMA c COMA c COMA c COMA COLOR PARENTESIS_C e
                {
                    Object RESULT =null;
                    int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
                    int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
                    Integer posx = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
                    int posyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
                    int posyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
                    Integer posy = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
                    int posx2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
                    int posx2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
                    Integer posx2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
                    int posy2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
                    int posy2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
                    Integer posy2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Token color = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int animacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int animacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Animacion animacion = (Animacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    /*System.out.printf("Graficar linea\n");*/
                    Linea figura = new Linea(posx2,posy2,color.getLexeme(),posx,posy,animacion);
                    graficador.addFigure(figura);
                    FiguraReport figuraC = (FiguraReport) figuras.get(3);
                    figuraC.setContador(figuraC.getContador()+1);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // b ::= POLIGONO PARENTESIS_A c COMA c COMA c COMA c COMA c COMA COLOR PARENTESIS_C e
                {
                    Object RESULT =null;
                    int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
                    int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
                    Integer posx = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
                    int posyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
                    int posyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
                    Integer posy = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
                    int altoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
                    int altoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
                    Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
                    int ancholeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
                    int anchoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
                    Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
                    int cantidadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
                    int cantidadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
                    Integer cantidad = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Token color = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int animacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int animacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Animacion animacion = (Animacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    /*System.out.printf("Graficar poligono\n");*/
                    Poligono figura = new Poligono(alto,ancho,cantidad,color.getLexeme(),posx,posy,animacion);
                    graficador.addFigure(figura);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // b ::= error b
                {
                    Object RESULT =null;
                    int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                    errores = true;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // c ::= d
                {
                    Integer RESULT =null;
                    int resultadoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int resultadoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Integer resultado = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = resultado; /*System.out.printf("Resultado FINAL: %d \n",resultado);*/
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // c ::= error
                {
                    Integer RESULT =null;
                    int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    errores = true;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // d ::= d SUMA d
                {
                    Integer RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Integer(e1.intValue()+e2.intValue());
                    operadoresList.add(new OperadorReport("Suma",op.getLine(),op.getColumn(),e1.toString()+op.getLexeme()+e2.toString()));

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // d ::= d RESTA d
                {
                    Integer RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new Integer(e1.intValue()-e2.intValue());
                    operadoresList.add(new OperadorReport("Resta",op.getLine(),op.getColumn(),e1.toString()+op.getLexeme()+e2.toString()));

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // d ::= d MULTI d
                {
                    Integer RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Integer(e1.intValue()*e2.intValue());
                    operadoresList.add(new OperadorReport("Multiplicacion",op.getLine(),op.getColumn(),e1.toString()+op.getLexeme()+e2.toString()));

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // d ::= d DIVISION d
                {
                    Integer RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Integer(e1.intValue()/e2.intValue());
                    operadoresList.add(new OperadorReport("Division",op.getLine(),op.getColumn(),e1.toString()+op.getLexeme()+e2.toString()));

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // d ::= ENTERO
                {
                    Integer RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Integer(Integer.parseInt(e1.getLexeme())); /*System.out.printf("Numero: %d\n",RESULT );*/
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // d ::= PARENTESIS_A d PARENTESIS_C
                {
                    Integer RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT = e1; /*System.out.printf("Resultado parentesis: %d\n",RESULT );*/
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // d ::= error c
                {
                    Integer RESULT =null;
                    int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                    errores = true;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // e ::= ANIMAR g
                {
                    Animacion RESULT =null;
                    int animleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int animright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Animacion anim = (Animacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = anim; /*System.out.printf("Se encontro una animacion \n" );*/
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // e ::=
                {
                    Animacion RESULT =null;

                    animacion = null;
                    RESULT  =  animacion;
                    /*System.out.printf("No se hace animacion \n" ); */

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // g ::= OBJETO ANTERIOR PARENTESIS_A c COMA c COMA f PARENTESIS_C
                {
                    Animacion RESULT =null;
                    int destinoxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
                    int destinoxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
                    Integer destinox = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
                    int destinoyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                    int destinoyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                    Integer destinoy = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Token tipo = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                    RESULT = new Animacion(destinox,destinoy,tipo.getLexeme());

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // g ::= error
                {
                    Animacion RESULT =null;
                    int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    errores = true;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // f ::= CURVA
                {
                    Token RESULT =null;
                    int restleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int restright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Token rest = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = rest;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // f ::= LINEA
                {
                    Token RESULT =null;
                    int restleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int restright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Token rest = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = rest;
                    AnimacionReport animacion = (AnimacionReport) animaciones.get(0);
                    animacion.setContador(animacion.getContador()+1);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int                        CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack            CUP$Parser$stack,
                int                        CUP$Parser$top)
                throws java.lang.Exception
        {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
